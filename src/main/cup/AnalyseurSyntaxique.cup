/* package et imports */
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
    // HashMap pour la gestion des variables
    //private HashMap<String,String> vars = new LinkedHashMap<>();
    List<String> vars = new ArrayList<String>();
    // gestion des erreurs d'evaluation
    private boolean erreur = false;
:};

 
parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s != null && s.left >= 0 ) {
                /* Ajoute le numero de ligne  et de colonne*/
                m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
            }
        }
        m = m + message;
        System.err.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN, ELSE, WHILE, DO, EGAL, GT, GTE, NIL, ERROR; 
terminal Integer ENTIER;
terminal String IDENT;
/* non terminaux */
non terminal program;
non terminal Arbre expression;
non terminal Arbre expr;
non terminal Arbre sequence;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc GT, GTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;

/* grammaire */
// un pg est une sequence d'insctions terminee par point
program ::= 
    sequence:s {: System.out.println(s.toString()); System.out.println(s.toAssembly(vars)); :}  POINT 
    ;

// une sequence est une suite d'instructions separes par des point virgules 
sequence ::= expression:e1 SEMI  sequence:e2 {:  RESULT = new Arbre(";",e1,e2) ;  :}
            | expression:e   {:RESULT = e; :}
            |
            ;

// une expession est soit une affectation ,une              
expression ::= expr:e {: RESULT = e ;:}
             | LET IDENT:nom EGAL expr:e {: RESULT = new Arbre("LET",new Arbre(nom,null,null),e) ; vars.add(nom);   :}              
             | WHILE expr:cond DO expression:e {: RESULT = new Arbre("WHILE",cond,e);  :}
             | IF expr:cond THEN expression:a1 ELSE expression:a2 {: RESULT = new Arbre("IF", cond, new Arbre("THEN",a1,a2));  :}
             | error // reprise d'erreurs
             ;

// expression arithmetiques et logiques 
expr ::= NOT:op expr:e {: RESULT = new Arbre((String)op,e,null)  ; :} 
       | expr:e1 AND expr:e2    {: RESULT = new Arbre("&&",e1,e2)  ; :} 
       | expr:e1 OR expr:e2        {: RESULT = new Arbre("||",e1,e2)  ; :} 
       | expr:e1 EGAL expr:e2    {: RESULT = new Arbre("=",e1,e2)  ; :} 
       | expr:e1 GT expr:e2        {: RESULT = new Arbre("<",e1,e2)  ; :}
       | expr:e1 GTE expr:e2    {: RESULT = new Arbre("<=",e1,e2)  ; :}
       | expr:e1 PLUS expr:e2     {: RESULT = new Arbre("+",e1,e2);  :} 
       | expr:e1 MOINS expr:e2    {: RESULT = new Arbre("-",e1,e2)  ; :} 
       | expr:e1 MUL expr:e2    {: RESULT = new Arbre("*",e1,e2)  ; :} 
       | expr:e1 DIV expr:e2    {: RESULT = new Arbre("/",e1,e2)  ; :} 
       | expr:e1 MOD expr:e2    {: RESULT = new Arbre("%",e1,e2)  ; :} 
       | MOINS expr:e  {: RESULT = new Arbre("-",e,null)  ; :}             %prec MOINS_UNAIRE
       | OUTPUT expr:e	{: RESULT = new Arbre("OUTPUT",e,null); :}		
       | INPUT	{: RESULT = new Arbre("INPUT",null,null); :}
       | NIL	{: RESULT = new Arbre(null,null,null); :}
       | ENTIER:n	{: RESULT = new Arbre(Integer.toString(n),null,null); :}	
       | IDENT:nom	{: RESULT = new Arbre(nom,null,null); :}				
       | PAR_G sequence:e PAR_D {: RESULT = new Arbre("", e , null); :}	
       ;
